parameters:
  - name: 'appName'
    default: 'subsets-client'
  - name: 'imageTag'
    default: '$(Build.SourceVersion)'
  - name: 'gcrSpace'
    default: 'eu.gcr.io'
  - name: 'gcrName'
    default: 'prod-bip/ssb/klass'

jobs:
  - job:
    displayName: 'Test, analyze, and build image'
    steps:
      - script: |
          npm install react-scripts@latest
          npm install
          npm audit fix --force
          CI=true npm run test:ci
          CI=false npm run build
        # Treating warnings as errors because process.env.CI = true.
        displayName: 'Tests med coverage'
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      - script: |
          npm install react-scripts@latest
          npm install --only=prod
          npm audit fix --forcelatest
          CI=true npm test
          CI=false npm run build
        displayName: 'Dev build'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      - script: |
          CI=false npm run build
        displayName: 'Prod build'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - task: PublishTestResults@2
        displayName: "Publish test results"
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "$(Build.SourcesDirectory)/test-report.xml"
      - task: PublishCodeCoverageResults@1
        displayName: "Publish coverage results"
        condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
          reportDirectory: '$(Build.SourcesDirectory)/src'
      - task: SonarQubePrepare@4
      # Task condition: We have community edition of SonarQube which only scans master-branch so
      # it makes no sense running this tag when branch is other than master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          SonarQube: 'bipSonarQube-Klass'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: $(Build.DefinitionName)
          cliProjectName: $(Build.Repository.Name)
          cliSources: '.'
      - task: SonarQubeAnalyze@4
      # Task condition: We have community edition of SonarQube which only scans master-branch so
      # it makes no sense running this tag when branch is other than master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - task: SonarQubePublish@4
      # Task condition: We have community edition of SonarQube which only scans master-branch so
      # it makes no sense running this tag when branch is other than master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      - task: Docker@2
        displayName: 'Docker Build'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          repository: '${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}'
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: '$(Build.SourceBranchName)-${{ parameters.imageTag }}'
      - task: Docker@2
        displayName: 'Docker Login'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          command: 'login'
          containerRegistry: gcrServiceConnection
      - task: Docker@2
        displayName: 'Docker Push'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          repository: '${{ parameters.gcrName }}/${{ parameters.appName }}'
          command: 'push'
          containerRegistry: gcrServiceConnection
          tags: '$(Build.SourceBranchName)-${{ parameters.imageTag }}'
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          secureFile: 'gcr-key.json'
      - script: |
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Set GCR Key'
      - task: gcr-vulneralbility-check@0
        displayName: 'GCR Vulnerability chqck'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
        inputs:
          projectId: 'prod-bip'
          imageHost: 'https://eu.gcr.io/'
          image: '${{ parameters.gcrName }}/${{ parameters.appName }}'
          imageTag: '$(Build.SourceBranchName)-${{ parameters.imageTag }}'
          timeBetweenRetries: '10000'
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io/
          docker tag ${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}:$(Build.SourceBranchName)-${{ parameters.imageTag }} ${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}:${{ parameters.imageTag }}
          docker tag ${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}:$(Build.SourceBranchName)-${{ parameters.imageTag }} ${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}:latest
          docker push ${{ parameters.gcrSpace }}/${{ parameters.gcrName }}/${{ parameters.appName }}
        displayName: 'Retag Image'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development'))
